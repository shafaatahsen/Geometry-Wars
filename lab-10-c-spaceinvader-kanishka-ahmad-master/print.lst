


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   18 00000000                 THUMB
   19 00000000         
   20 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   21 00000000         ; Output a 32-bit number in unsigned decimal format
   22 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   23 00000000         ; Output: none
   24 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   25 00000000         LCD_OutDec
   26 00000000         ;; --UUU-- Complete this (copy from Lab7-8)
   27 00000000         
   28 00000000 00000000 
                       INPUT   EQU              0
   29 00000000 00000004 
                       OFFset  EQU              4
   30 00000000 00000008 
                       NUM     EQU              8
   31 00000000 00000030 
                       ASCII   EQU              48
   32 00000000 2800            CMP              R0, #0
   33 00000002 D033            BEQ              zero
   34 00000004         
   35 00000004 B086            SUB              SP, #24     ; Allocate
   36 00000006 46EC            MOV              R12, SP
   37 00000008 F8CC 0000       STR              R0, [R12,#INPUT]
   38 0000000C F04F 0017       MOV              R0, #23
   39 00000010 F8CC 0004       STR              R0, [R12,#OFFset]
   40 00000014 F04F 0030       MOV              R0,#ASCII
   41 00000018 F88C 0017       STRB             R0, [R12,#23] ; initialize firs
                                                            t value to 0
   42 0000001C F04F 0000       MOV              R0, #0
   43 00000020 F88C 0018       STRB             R0, [R12,#24] ;initialize null 
                                                            character
   44 00000024         
   45 00000024 F8DC 0000       LDR              R0, [R12,#INPUT]
   46 00000028         



ARM Macro Assembler    Page 2 


   47 00000028         
   48 00000028 2800    Check10 CMP              R0, #0      ;check if less than
                                                             10
   49 0000002A D013            BEQ              LCDPOP
   50 0000002C F04F 030A       MOV              R3, #10
   51 00000030 FBB0 F1F3       UDIV             R1, R0, R3  ;divide input by 10
                                                              e.g. 679(R0)/10(r
                                                            3) = 67(r1)
   52 00000034 FB01 F203       MUL              R2, R1, R3  ;get largest factor
                                                             of 10 that divide 
                                                            input (10*largest n
                                                            umber that div inpu
                                                            t) R2 =670
   53 00000038 EBA0 0002       SUB              R0, R2      ;modulo, remainder 
                                                            of 10 (679-670=9)
   54 0000003C         
   55 0000003C F8DC 3004       LDR              R3, [R12, #OFFset]
   56 00000040 F100 0030       ADD              R0, #ASCII
   57 00000044 F80C 0003       STRB             R0, [R12, R3] ;store on stack
   58 00000048         
   59 00000048 F1A3 0301       SUB              R3, #1      ;go up stack 
   60 0000004C F8CC 3004       STR              R3, [R12, #OFFset]
   61 00000050         
   62 00000050 4608            MOV              R0, R1
   63 00000052 E7E9            B                Check10
   64 00000054         
   65 00000054 F8DC 0004 
                       LCDPOP  LDR              R0, [R12, #OFFset]
   66 00000058 4460            ADD              R0, R12
   67 0000005A F100 0001       ADD              R0, #1      ; location is one u
                                                            p because of decrem
                                                            ent before call
   68 0000005E B507            PUSH             {R0, R1, R2, LR}
   69 00000060 F7FF FFFE       BL               ST7735_OutString
   70 00000064 E8BD 4007       POP              {R0, R1, R2, LR}
   71 00000068         
   72 00000068         
   73 00000068         
   74 00000068 B006    DONE    ADD              SP, #24     ; Deallocate
   75 0000006A 4770            BX               LR
   76 0000006C         
   77 0000006C F04F 0030 
                       zero    MOV              R0, #ASCII  ; zero exception
   78 00000070 B507            PUSH             {R0, R1, R2, LR}
   79 00000072 F7FF FFFE       BL               ST7735_OutChar
   80 00000076 E8BD 4007       POP              {R0, R1, R2, LR}
   81 0000007A         
   82 0000007A         
   83 0000007A 4770            BX               LR
   84 0000007C         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   85 0000007C         
   86 0000007C         ; -----------------------LCD _OutFix--------------------
                       --
   87 0000007C         ; Output characters to LCD display in fixed-point format
                       
   88 0000007C         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   89 0000007C         ; Inputs:  R0 is an unsigned 32-bit number
   90 0000007C         ; Outputs: none



ARM Macro Assembler    Page 3 


   91 0000007C         ; E.g., R0=0,    then output "0.000 "
   92 0000007C         ;       R0=3,    then output "0.003 "
   93 0000007C         ;       R0=89,   then output "0.089 "
   94 0000007C         ;       R0=123,  then output "0.123 "
   95 0000007C         ;       R0=9999, then output "9.999 "
   96 0000007C         ;       R0>9999, then output "*.*** "
   97 0000007C         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   98 0000007C         LCD_OutFix
   99 0000007C         ;; --UUU-- Complete this (copy from Lab7-8)
  100 0000007C 00000000 
                       INPUT2  EQU              0
  101 0000007C 00000004 
                       OFFset2 EQU              4
  102 0000007C 00000008 
                       NUM2    EQU              8
  103 0000007C         
  104 0000007C B084            SUB              SP, #16     ; Allocate
  105 0000007E 46EC            MOV              R12, SP
  106 00000080 F8CC 0000       STR              R0, [R12,#INPUT2]
  107 00000084 F04F 0010       MOV              R0, #16
  108 00000088 F8CC 0004       STR              R0, [R12,#OFFset2]
  109 0000008C         
  110 0000008C F8DC 0000       LDR              R0, [R12, #INPUT2]
  111 00000090 F242 710F       MOV              R1, #9999   ; check if greater 
                                                            than 9.999, then ou
                                                            tput to *.***
  112 00000094 4288            CMP              R0, R1
  113 00000096 D848            BHI              TooMUCH
  114 00000098         
  115 00000098 F04F 0030       MOV              R0,#ASCII
  116 0000009C F88C 0010       STRB             R0, [R12,#16] ;initialize value
                                                            s to 0
  117 000000A0 F88C 000F       STRB             R0, [R12,#15]
  118 000000A4 F88C 000E       STRB             R0, [R12,#14]
  119 000000A8 F88C 000D       STRB             R0, [R12,#13]
  120 000000AC         
  121 000000AC F8DC 0000       LDR              R0, [R12, #INPUT2]
  122 000000B0 2800            CMP              R0, #0
  123 000000B2 D015            BEQ              LCDPOP2
  124 000000B4         
  125 000000B4         
  126 000000B4 2800    Check01 CMP              R0, #0      ;check if less than
                                                             10
  127 000000B6 D013            BEQ              LCDPOP2
  128 000000B8 F04F 030A       MOV              R3, #10
  129 000000BC FBB0 F1F3       UDIV             R1, R0, R3  ;divide input by 10
                                                              e.g. 679(R0)/10(r
                                                            3) = 67(r1)
  130 000000C0 FB01 F203       MUL              R2, R1, R3  ;get largest factor
                                                             of 10 that divide 
                                                            input (10*largest n
                                                            umber that div inpu
                                                            t) R2 =670
  131 000000C4 EBA0 0002       SUB              R0, R2      ;modulo, remainder 
                                                            of 10 (679-670=9)
  132 000000C8         
  133 000000C8 F8DC 3004       LDR              R3, [R12, #OFFset2]
  134 000000CC F100 0030       ADD              R0, #ASCII



ARM Macro Assembler    Page 4 


  135 000000D0 F80C 0003       STRB             R0, [R12, R3] ;store on stack
  136 000000D4         
  137 000000D4 F1A3 0301       SUB              R3, #1      ;go up stack 
  138 000000D8 F8CC 3004       STR              R3, [R12, #OFFset2]
  139 000000DC         
  140 000000DC 4608            MOV              R0, R1
  141 000000DE E7E9            B                Check01
  142 000000E0         
  143 000000E0 F89C 000D 
                       LCDPOP2 LDRB             R0, [R12, #13] ; OUT the fixed 
                                                            point value most si
                                                            gnificant bit
  144 000000E4 B507            PUSH             {R0, R1, R2, LR}
  145 000000E6 F7FF FFFE       BL               ST7735_OutChar
  146 000000EA E8BD 4007       POP              {R0, R1, R2, LR}
  147 000000EE         
  148 000000EE F04F 002E       MOV              R0, #46
  149 000000F2 B507            PUSH             {R0, R1, R2, LR} 
                                                            ; out the period
  150 000000F4 F7FF FFFE       BL               ST7735_OutChar
  151 000000F8 E8BD 4007       POP              {R0, R1, R2, LR}
  152 000000FC         
  153 000000FC F89C 000E       LDRB             R0, [R12, #14]
  154 00000100 B507            PUSH             {R0, R1, R2, LR}
  155 00000102 F7FF FFFE       BL               ST7735_OutChar
  156 00000106 E8BD 4007       POP              {R0, R1, R2, LR}
  157 0000010A         
  158 0000010A F89C 000F       LDRB             R0, [R12, #15]
  159 0000010E B507            PUSH             {R0, R1, R2, LR}
  160 00000110 F7FF FFFE       BL               ST7735_OutChar
  161 00000114 E8BD 4007       POP              {R0, R1, R2, LR}
  162 00000118         
  163 00000118 F89C 0010       LDRB             R0, [R12, #16]
  164 0000011C B507            PUSH             {R0, R1, R2, LR}
  165 0000011E F7FF FFFE       BL               ST7735_OutChar
  166 00000122 E8BD 4007       POP              {R0, R1, R2, LR}
  167 00000126         
  168 00000126         
  169 00000126         
  170 00000126 B004    DONE2   ADD              SP, #16     ; Deallocate
  171 00000128 4770            BX               LR
  172 0000012A         
  173 0000012A F04F 002A 
                       TooMUCH MOV              R0, #42
  174 0000012E F88C 000D       STRB             R0, [R12, #13]
  175 00000132 F88C 000E       STRB             R0, [R12, #14]
  176 00000136 F88C 000F       STRB             R0, [R12, #15]
  177 0000013A F88C 0010       STRB             R0, [R12, #16]
  178 0000013E         
  179 0000013E E7CF            B                LCDPOP2
  180 00000140         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  181 00000140         
  182 00000140                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  183 00000140                 END                          ; end of file
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: .text unused
Check01 000000B4

Symbol: Check01
   Definitions
      At line 126 in file Print.s
   Uses
      At line 141 in file Print.s
Comment: Check01 used once
Check10 00000028

Symbol: Check10
   Definitions
      At line 48 in file Print.s
   Uses
      At line 63 in file Print.s
Comment: Check10 used once
DONE 00000068

Symbol: DONE
   Definitions
      At line 74 in file Print.s
   Uses
      None
Comment: DONE unused
DONE2 00000126

Symbol: DONE2
   Definitions
      At line 170 in file Print.s
   Uses
      None
Comment: DONE2 unused
LCDPOP 00000054

Symbol: LCDPOP
   Definitions
      At line 65 in file Print.s
   Uses
      At line 49 in file Print.s
Comment: LCDPOP used once
LCDPOP2 000000E0

Symbol: LCDPOP2
   Definitions
      At line 143 in file Print.s
   Uses
      At line 123 in file Print.s
      At line 127 in file Print.s
      At line 179 in file Print.s

LCD_OutDec 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: LCD_OutDec
   Definitions
      At line 25 in file Print.s
   Uses
      At line 14 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 0000007C

Symbol: LCD_OutFix
   Definitions
      At line 98 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
TooMUCH 0000012A

Symbol: TooMUCH
   Definitions
      At line 173 in file Print.s
   Uses
      At line 113 in file Print.s
Comment: TooMUCH used once
zero 0000006C

Symbol: zero
   Definitions
      At line 77 in file Print.s
   Uses
      At line 33 in file Print.s
Comment: zero used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ASCII 00000030

Symbol: ASCII
   Definitions
      At line 31 in file Print.s
   Uses
      At line 40 in file Print.s
      At line 56 in file Print.s
      At line 77 in file Print.s
      At line 115 in file Print.s
      At line 134 in file Print.s

INPUT 00000000

Symbol: INPUT
   Definitions
      At line 28 in file Print.s
   Uses
      At line 37 in file Print.s
      At line 45 in file Print.s

INPUT2 00000000

Symbol: INPUT2
   Definitions
      At line 100 in file Print.s
   Uses
      At line 106 in file Print.s
      At line 110 in file Print.s
      At line 121 in file Print.s

NUM 00000008

Symbol: NUM
   Definitions
      At line 30 in file Print.s
   Uses
      None
Comment: NUM unused
NUM2 00000008

Symbol: NUM2
   Definitions
      At line 102 in file Print.s
   Uses
      None
Comment: NUM2 unused
OFFset 00000004

Symbol: OFFset
   Definitions
      At line 29 in file Print.s
   Uses
      At line 39 in file Print.s
      At line 55 in file Print.s
      At line 60 in file Print.s
      At line 65 in file Print.s

OFFset2 00000004



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: OFFset2
   Definitions
      At line 101 in file Print.s
   Uses
      At line 108 in file Print.s
      At line 133 in file Print.s
      At line 138 in file Print.s

7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 79 in file Print.s
      At line 145 in file Print.s
      At line 150 in file Print.s
      At line 155 in file Print.s
      At line 160 in file Print.s
      At line 165 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      At line 69 in file Print.s
Comment: ST7735_OutString used once
2 symbols
350 symbols in table
